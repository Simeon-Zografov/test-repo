{"uid":"850424b6e497e509","name":"Visual check of the Home page","fullName":"Tests.test_VisualTests.TestVisual#test_2","historyId":"7e2162c355f3bd4c8610625a9983e516","time":{"start":1728285639983,"stop":1728285641470,"duration":1487},"status":"broken","statusMessage":"ValueError: ('Image sizes do not match.', 13537280, 3650560)","statusTrace":"self = <Tests.test_VisualTests.TestVisual object at 0x7f7545cc3dd0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8cfe8410749a4311229144929cc24546\")>\n\n    @severity(severity_level.NORMAL)\n    @allure.feature('Home page')\n    @allure.title(\"Visual check of the Home page\")\n    def test_2(self, driver):\n        landing_page_obj = LandingPage(driver)\n        driver.get(BaseClass.url)\n        landing_page_obj.complete_login(BaseClass.username, BaseClass.password)\n>       visual_comparison(driver, \"home_page\", \"main\")\n\nTests/test_VisualTests.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nCommon/VisualChack.py:26: in visual_comparison\n    mismatch = pixelmatch(reference_image, current_image, img_diff, includeAA=True)\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pixelmatch/contrib/PIL.py:52: in pixelmatch\n    diff_pixels = core.pixelmatch(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nimg1 = [255, 255, 255, 255, 255, 255, ...]\nimg2 = [255, 255, 255, 255, 255, 255, ...], width = 2560, height = 1322\noutput = [0, 0, 0, 0, 0, 0, ...], threshold = 0.1, includeAA = True, alpha = 0.1\naa_color = (255, 255, 0), diff_color = (255, 0, 0), diff_mask = False\nfail_fast = False\n\n    def pixelmatch(\n        img1: ImageSequence,\n        img2: ImageSequence,\n        width: int,\n        height: int,\n        output: Optional[MutableImageSequence] = None,\n        threshold: float = 0.1,\n        includeAA: bool = False,\n        alpha: float = 0.1,\n        aa_color: RGBTuple = (255, 255, 0),\n        diff_color: RGBTuple = (255, 0, 0),\n        diff_mask: bool = False,\n        fail_fast: bool = False,\n    ) -> int:\n        \"\"\"\n        Compares two images, writes the output diff and returns the number of mismatched pixels.\n        'Raw image data' refers to a 1D, indexable collection of image data in the\n        format [R1, G1, B1, A1, R2, G2, ...].\n    \n        :param img1: Image data to compare with img2. Must be the same size as img2\n        :param img2: Image data to compare with img2. Must be the same size as img1\n        :param width: Width of both images (they should be the same).\n        :param height: Height of both images (they should be the same).\n        :param output: Image data to write the diff to. Should be the same size as\n        :param threshold: matching threshold (0 to 1); smaller is more sensitive, defaults to 1\n        :param includeAA: whether or not to skip anti-aliasing detection, ie if includeAA is True,\n            detecting and ignoring anti-aliased pixels is disabled. Defaults to False\n        :param alpha: opacity of original image in diff output, defaults to 0.1\n        :param aa_color: tuple of RGB color of anti-aliased pixels in diff output,\n            defaults to (255, 255, 0) (yellow)\n        :param diff_color: tuple of RGB color of the color of different pixels in diff output,\n            defaults to (255, 0, 0) (red)\n        :param diff_mask: whether or not to draw the diff over a transparent background (a mask),\n            defaults to False\n        :param fail_fast: if true, will return after first different pixel. Defaults to false\n        :return: number of pixels that are different or 1 if fail_fast == true\n        \"\"\"\n    \n        if len(img1) != len(img2):\n>           raise ValueError(\"Image sizes do not match.\", len(img1), len(img2))\nE           ValueError: ('Image sizes do not match.', 13537280, 3650560)\n\n/opt/hostedtoolcache/Python/3.11.10/x64/lib/python3.11/site-packages/pixelmatch/core.py:46: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_reporting_directories","time":{"start":1728285510720,"stop":1728285510721,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1728285638283,"stop":1728285638501,"duration":218},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"driver::0","time":{"start":1728285648271,"stop":1728285648338,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Home page"},{"name":"severity","value":"normal"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_VisualTests"},{"name":"subSuite","value":"TestVisual"},{"name":"host","value":"fv-az1939-349"},{"name":"thread","value":"2048-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_VisualTests"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'Chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":9,"skipped":0,"passed":0,"unknown":0,"total":10},"items":[{"uid":"37e03e257799f09b","status":"broken","statusDetails":"ValueError: ('Image sizes do not match.', 13537280, 3650560)","time":{"start":1728285183048,"stop":1728285184516,"duration":1468}},{"uid":"b51ae46d8b04dd19","status":"broken","statusDetails":"ValueError: ('Image sizes do not match.', 13537280, 3650560)","time":{"start":1728284432209,"stop":1728284433695,"duration":1486}},{"uid":"81a218961cf9c2dc","status":"broken","statusDetails":"ValueError: ('Image sizes do not match.', 13537280, 3650560)","time":{"start":1728042423636,"stop":1728042425090,"duration":1454}},{"uid":"e0f9b68371eb5b22","status":"broken","statusDetails":"ValueError: ('Image sizes do not match.', 13537280, 3650560)","time":{"start":1728042017507,"stop":1728042018992,"duration":1485}},{"uid":"745d11411f514a43","status":"broken","statusDetails":"ValueError: ('Image sizes do not match.', 13537280, 3650560)","time":{"start":1728041719129,"stop":1728041720732,"duration":1603}},{"uid":"247b34605b3c8d0","status":"broken","statusDetails":"ValueError: ('Image sizes do not match.', 13537280, 3650560)","time":{"start":1728041230223,"stop":1728041231712,"duration":1489}},{"uid":"2ab933aa8a312c7e","status":"broken","statusDetails":"ValueError: ('Image sizes do not match.', 13537280, 3650560)","time":{"start":1728040536867,"stop":1728040538325,"duration":1458}},{"uid":"501cd20aac56a915","status":"broken","statusDetails":"ValueError: ('Image sizes do not match.', 13537280, 3384320)","time":{"start":1728038137500,"stop":1728038141780,"duration":4280}},{"uid":"fa200b73a8e0c6ee","status":"failed","statusDetails":"AssertionError: \u001B[31mFAILURE: \u001B[0m\n\u001B[31mtest_VisualTests.py\u001B[0m:28 in test_2() -> \n\u001B[31mVisualChack.py\u001B[0m:27 in visual_comparison() -> with check, allure.step(f\"Visual check for {path} in {i} iteration\"):\n\u001B[31mVisualChack.py\u001B[0m:38 in visual_comparison -> assert mismatch == 0\n\u001B[31mAssertionError\n\u001B[0m\n\n\u001B[31mFAILURE: \u001B[0m\n------------------------------------------------------------\nFailed Checks: 2","time":{"start":1728024744825,"stop":1728024762259,"duration":17434}}]},"tags":[]},"source":"850424b6e497e509.json","parameterValues":["'Chrome'"]}